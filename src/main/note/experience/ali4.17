线程池参数
消息队列消息重复处理
full gc触发方式，频繁full gc如何检测
mysql limit优化
复合索引

redis 缓存失效的问题，经典三问，雪崩，击穿，穿透。
穿透:频繁访问不存在数据，造成访问大量打入DB，解决：布隆过滤器，缓存空对象。
击穿:热点数据缓存失效，访问大量打入DB。解决:镜像redis，设置访问锁。
雪崩:大量缓存同一时间失效。解决:缓存失效时间错开
springcloud微服务组件

equals() hashcode
concurrenthashmap
双指针问题
设计模式
分为三类：
创建类，结构类，行为类。
创建类:类的创建方式，使用不同的方法，如工厂，单例，原型，创建则模式。
结构类:类的构成模式，主要用于对类的修饰，增强。
代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。
适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。
桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现的，从而降低了抽象和实现这两个可变维度的耦合度。
装饰（Decorator）模式：动态地给对象增加一些职责，即增加其额外的功能。
外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。
享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。
组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。

行为类:类的行为模式，比如某些类要执行某些操作，这时候使用这些设计模式可以使这些方法更清晰的被执行，开发人员更容易理解。
行为型模式用于描述程序在运行时复杂的流程控制，
即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，
它涉及算法与对象间职责的分配。

juc包工具类
