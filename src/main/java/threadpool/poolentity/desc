线程池构造参数:核心线程size，最大线程size，等待时间单位，等待时间长度，阻塞队列，线程工厂，拒绝策略
JDK封装好的线程池创建方法，
由于FixedThreadPool 和 SingleThreadPool：
允许的请求队列长度为 Integer.MAX_VALUE ，会堆积大量请求OOM(即阻塞队列)
CachedThreadPool 和 ScheduledThreadPool：
允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量线程OOM(即允许存在的最大线程数)

所以，创建线程池请通过ThreadPoolExecutor创建

线程构造参数:
核心线程数，即线程池维护的最小的存活线程数，这些线程无论如何都会存活在线程池中
最大线程数，线程池能够装载的最大线程个数，如果线程池现在运行的线程数小于最大线程数时，当阻塞队列满后会创建新线程加入到线程池中运行
线程存活时间
线程存活时间单位
阻塞队列，线程池执行新的任务，都会先将线程加入阻塞队列当中，当现运行线程数小于核心线程数时，队列会直接弹出任务，用核心线程执行任务。
当现运行线程数大于等于核心线程数时，阻塞队列会将线程任务存储在队列中，直至新增线程数超过阻塞队列的容量时，创建新的线程执行，或是现运行线程小于核心线程
时，才会将任务用核心线程执行。如果现运行线程数等于最大容量，且阻塞队列也满时，再有新的任务加入线程池，会执行拒绝策略
线程工厂：任务被创建入线程池执行之前对线程做的一个装饰。类似代理和装饰，不过只能作用于线程创建前。
拒绝策略：如上阻塞队列所述，如果线程被拒绝了，就会执行这个方法。默认执行丢弃，可以自行定义具体方法。


线程池可以自定义线程工厂
线程工厂 类似装饰器模式，在你创建线程的原先基础上增加其他的操作
线程工厂默认的话就是默认的构造线程的方法，自定义的话，就是在原先创建线程方法的基础上增加你想要做的操作，所以我认为这个和装饰器更类似