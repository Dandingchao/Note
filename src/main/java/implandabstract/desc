使用接口的一个很重要的原因上，你搭建的项目里很多情况下你无法修改上层的类代码
你只能通过使用接口来实现在其他语言中的多继承

七.什么情况下应该使用接口而不用抽象类.
好了, 回到本文最重要的一个问题.
做个总结
需要实现多态
要实现的方法(功能)不是当前类族的必要(属性).//因为如果使用抽象类，那么集成该类的所有成员都要实现该方法
要为不同类族的多个类实现同样的方法(功能).
下面是分析:
7.1 需要实现多态
很明显, 接口其中一个存在意义就是为了实现多态. 这里不多说了.
而抽象类(继承) 也可以实现多态
7.2. 要实现的方法(功能)不是当前类族的必要(属性).
上面的例子就表明, 捕猎这个方法不是动物这个类必须的,在动物的派生类中, 有些类需要, 有些不需要.
如果把捕猎方法卸载动物超类里面是不合理的浪费资源.
所以把捕猎这个方法封装成1个接口, 让派生类自己去选择实现!
7.3. 要为不同类族的多个类实现同样的方法(功能).
上面说过了, 其实不是只有Animal类的派生类才可以实现Huntable接口.
如果Farmer实现了这个接口, 那么农夫自己就可以去捕猎动物了...
我们拿另个常用的接口Comparable来做例子.
这个接口是应用了泛型,
首先, 比较(CompareTo) 这种行为很难界定适用的类族, 实际上, 几乎所有的类都可以比较.
比如 数字类可以比较大小, 人类可以比较财富, 动物可以比较体重等.
所以各种类都可以实现这个比较接口.
一旦实现了这个比较接口. 就可以开启另1个隐藏技能:
就是可以利用Arrays.sort()来进行排序了.
就如实现了捕猎的动物,
可以被农夫Farmer喂兔子一样...